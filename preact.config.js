/* eslint-disable */

import { resolve } from 'path'

const { parsed } = require('dotenv').config()

export default {
  /**
   * Function that mutates the original webpack config.
   * Supports asynchronous changes when a promise is returned (or it's an async function).
   *
   * @param {object} config - original webpack config.
   * @param {object} env - options passed to the CLI.
   * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
   * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
   **/
  webpack(config, env, helpers, options) {
    config.resolve.modules.push(env.src)

    config.resolve.alias.app = resolve(__dirname, 'src/ts/app.tsx')
    config.resolve.alias.auth = resolve(__dirname, 'src/ts/auth.ts')
    config.resolve.alias['firebase-config'] = resolve(__dirname, 'src/ts/firebase.ts')
    config.resolve.alias.slices = resolve(__dirname, 'src/ts/slices')
    config.resolve.alias.components = resolve(__dirname, 'src/ts/components')
    config.resolve.alias.models = resolve(__dirname, 'src/ts/models')
    config.resolve.alias.modules = resolve(__dirname, 'src/ts/modules')
    config.resolve.alias.services = resolve(__dirname, 'src/ts/services')
    config.resolve.alias.utils = resolve(__dirname, 'src/ts/utils')
    config.resolve.alias.store = resolve(__dirname, 'src/ts/store')

    config.node.console = true
    config.node.process = true
    config.node.Buffer = true
    config.node.fs = 'empty'
    config.node.net = 'empty'
    config.node.tls = 'empty'

    const { plugin } = helpers.getPluginsByName(config, 'DefinePlugin')[0]
    Object.assign(
      plugin.definitions,
      Object.keys(parsed).reduce(
        (env, key) => ({
          ...env,
          [`process.env.${key}`]: JSON.stringify(parsed[key]),
        }),
        {},
      ),
    )

    config.module.rules[4].use.splice(1, 0, {
      loader: '@teamsupercell/typings-for-css-modules-loader',
      options: {
        banner: '// This file is automatically generated from your CSS. Any edits will be overwritten.',
        disableLocalsExport: true,
      },
    })

    // // Use any `index` file, not just index.js
    // config.resolve.alias["preact-cli-entrypoint"] = resolve(
    //   process.cwd(),
    //   "src",
    //   "index"
    // );
  },
}
